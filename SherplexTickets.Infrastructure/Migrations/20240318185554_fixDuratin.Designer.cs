// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SherplexTickets.Infrastructure.Data;

#nullable disable

namespace SherplexTickets.Infrastructure.Migrations
{
    [DbContext(typeof(SherplexTicketsDbContext))]
    [Migration("20240318185554_fixDuratin")]
    partial class fixDuratin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Books.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The current Authot's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The current Authot's Full Name");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Димитър Димов"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Иван Вазов"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Паисий Хилендарски"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Димитър Талев"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Алеко Константинов"
                        });
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Books.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The current Book's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("The current Book's Author Identifier");

                    b.Property<int>("CoverTypeId")
                        .HasColumnType("int")
                        .HasComment("The current Book's CoverType's Identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The current Book's Description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("The current Book's cover image url");

                    b.Property<int>("Pages")
                        .HasColumnType("int")
                        .HasComment("The current Book's Pages Count");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The current Book's Title");

                    b.Property<int>("YearPublished")
                        .HasColumnType("int")
                        .HasComment("The date on which the curent Book was published");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CoverTypeId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CoverTypeId = 1,
                            Description = "Романът „Тютюн“ разказва за страстите, сблъсъците и разочарованията на тютюневите фермери в България през края на 19-и началото на 20 век. Главният герой, Тодор Гълъбов, се опитва да се пребори с лошата дола на съдбата и да изгради бъдеще за семейството си в условията на социални и икономически проблеми.",
                            ImageUrl = "https://www.musalabooks.bg/image/cache/catalog/IMG_4733-500x650.JPG",
                            Pages = 400,
                            Title = "Тютюн",
                            YearPublished = 1951
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CoverTypeId = 1,
                            Description = "„Под игото“ е роман от Иван Вазов, който разказва за борбата на българския народ за свобода от османско владичество. Книгата проследява историята на героите в едно село през времето на Априлското въстание.",
                            ImageUrl = "https://cdn.ozone.bg/media/catalog/product/cache/1/image/400x498/a4e40ebdc3e371adff845072e1c73f37/p/o/a9bb78972c12abadb60050742887fe9b/pod-igoto-30.jpg",
                            Pages = 280,
                            Title = "Под игото",
                            YearPublished = 1888
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            CoverTypeId = 2,
                            Description = "„История славянобългарска“ е творба на Паисий Хилендарски, която се смята за първата българска историографска книга. В нея се описва историята и културното развитие на българския народ.",
                            ImageUrl = "https://cdn.ozone.bg/media/catalog/product/cache/1/image/400x498/a4e40ebdc3e371adff845072e1c73f37/i/s/8357898131e0945b7bb43a6b6e15cee3/istoriya-slavyanobalgarska-uchilishtna-biblioteka---damyan-yakov-30.jpg",
                            Pages = 150,
                            Title = "История славянобългарска",
                            YearPublished = 1762
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            CoverTypeId = 1,
                            Description = "„Железният светилник“ е роман на Димитър Талев, който разказва за историята на едно българско село във времето на Освобождението. Книгата проследява събитията и промените, които преминава селото и неговите обитатели.",
                            ImageUrl = "https://hermesbooks.bg/media/catalog/product/cache/e533a3e3438c08fe7c51cedd0cbec189/j/e/jelezniat_svetilnik_hrm_2_20200901160342.jpg",
                            Pages = 320,
                            Title = "Железният светилник",
                            YearPublished = 1937
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            CoverTypeId = 1,
                            Description = "„Бай Ганьо“ е сатиричен роман на Алеко Константинов, който разказва за приключенията на българина Бай Ганьо в ранните години на 20 век. Книгата представлява портрет на типичния българин от тоя период - обаятелен, амбициозен, но и смешен поради своите недостатъци и характеристични черти на поведение.",
                            ImageUrl = "https://cdn.ozone.bg/media/catalog/product/cache/1/image/9df78eab33525d08d6e5fb8d27136e95/b/a/c5986df39a28a57f97d1598df42c7f45/bay-ganyo-pan-30.jpg",
                            Pages = 240,
                            Title = "Бай Ганьо",
                            YearPublished = 1895
                        });
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Books.BookReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The current Book Review's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasComment("The current Book's Identifier");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The current Book Review's Description");

                    b.Property<int>("Rate")
                        .HasColumnType("int")
                        .HasComment("The current Book Review's Rate");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The current Book Review's Title");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The current User's Identifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookReviews");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Books.CoverType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The current CoverType's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The current CoverType's Name");

                    b.HasKey("Id");

                    b.ToTable("CoverTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Мека"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Твърда"
                        });
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Books.GenreOfBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The current Movie Genre's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("The current Movie Genre's Name");

                    b.HasKey("Id");

                    b.ToTable("GenreOfBooks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Художествена литература"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Българска литература"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Българска класика"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Световна класика"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Криминален роман"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Фантастика"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Любовен роман"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Исторически роман"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Хумористична проза"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Роман"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Разкази"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Поезия"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Публицистика"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Биографична литература"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Биографии"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Автобиографии"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Пътеводители"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Техническа литература"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Образование"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Бизнес и Икономика"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Кулинария"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Диети"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Йога"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Религия и митология"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Философия"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Речници и разговорници"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Книги на други езици"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Детска литература"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Хорър"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Новели"
                        });
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.BookStores.BookStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The current BookStore's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ClosingTime")
                        .HasColumnType("datetime2")
                        .HasComment("The current BookStore's Closing Time");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The current BookStore's Mobile Contact");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The current BookStore's Image Url");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The current BookStore's Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The current BookStore's Name");

                    b.Property<DateTime>("OpeningTime")
                        .HasColumnType("datetime2")
                        .HasComment("The current BookStore's Opening Time");

                    b.HasKey("Id");

                    b.ToTable("BookStores");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Carts.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The current User's Identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Mappings.BookMapping.BookBookStore", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasComment("The current Book's Identifier");

                    b.Property<int>("BookStoreId")
                        .HasColumnType("int")
                        .HasComment("The current BookStore's Identifier");

                    b.HasKey("BookId", "BookStoreId");

                    b.HasIndex("BookStoreId");

                    b.ToTable("BookBookStores");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Mappings.BookMapping.BookCart", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasComment("The current Book's Identifier");

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasComment("The current Cart's Identifier");

                    b.HasKey("BookId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("BookCarts");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Mappings.BookMapping.GenreGenreOfBook", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("GenresGenresOfBooks");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            BookId = 1
                        },
                        new
                        {
                            GenreId = 2,
                            BookId = 1
                        },
                        new
                        {
                            GenreId = 1,
                            BookId = 2
                        },
                        new
                        {
                            GenreId = 2,
                            BookId = 2
                        },
                        new
                        {
                            GenreId = 2,
                            BookId = 3
                        },
                        new
                        {
                            GenreId = 3,
                            BookId = 3
                        },
                        new
                        {
                            GenreId = 2,
                            BookId = 4
                        },
                        new
                        {
                            GenreId = 4,
                            BookId = 4
                        },
                        new
                        {
                            GenreId = 1,
                            BookId = 5
                        },
                        new
                        {
                            GenreId = 7,
                            BookId = 5
                        },
                        new
                        {
                            GenreId = 9,
                            BookId = 5
                        });
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Mappings.MoviesMaping.ActorMovie", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int")
                        .HasComment("The current Actor Identifier");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasComment("The current Movie Identifier");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("ActorsMovies");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 2,
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 3,
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 4,
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 5,
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 6,
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 7,
                            MovieId = 3
                        },
                        new
                        {
                            ActorId = 8,
                            MovieId = 3
                        },
                        new
                        {
                            ActorId = 9,
                            MovieId = 3
                        },
                        new
                        {
                            ActorId = 10,
                            MovieId = 4
                        },
                        new
                        {
                            ActorId = 11,
                            MovieId = 4
                        },
                        new
                        {
                            ActorId = 12,
                            MovieId = 4
                        },
                        new
                        {
                            ActorId = 13,
                            MovieId = 5
                        },
                        new
                        {
                            ActorId = 14,
                            MovieId = 5
                        },
                        new
                        {
                            ActorId = 15,
                            MovieId = 5
                        });
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Mappings.MoviesMaping.GenreGenreOfMovie", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasComment("The current Genre's Identifier");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasComment("The current Movie's Identifier");

                    b.HasKey("GenreId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("GenresMovies");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            MovieId = 1
                        },
                        new
                        {
                            GenreId = 7,
                            MovieId = 1
                        },
                        new
                        {
                            GenreId = 1,
                            MovieId = 2
                        },
                        new
                        {
                            GenreId = 7,
                            MovieId = 2
                        },
                        new
                        {
                            GenreId = 1,
                            MovieId = 3
                        },
                        new
                        {
                            GenreId = 7,
                            MovieId = 3
                        },
                        new
                        {
                            GenreId = 1,
                            MovieId = 4
                        },
                        new
                        {
                            GenreId = 6,
                            MovieId = 4
                        },
                        new
                        {
                            GenreId = 1,
                            MovieId = 5
                        },
                        new
                        {
                            GenreId = 6,
                            MovieId = 5
                        },
                        new
                        {
                            GenreId = 7,
                            MovieId = 5
                        });
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Mappings.MoviesMaping.MovieMovieTheater", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasComment("The current Movie's Identifier");

                    b.Property<int>("MovieTheaterId")
                        .HasColumnType("int")
                        .HasComment("The current MovieTheater's Identifier");

                    b.HasKey("MovieId", "MovieTheaterId");

                    b.HasIndex("MovieTheaterId");

                    b.ToTable("MoviesMoviesTheaters");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Movies.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The current Actor's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("The current Actor's FirstName");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Робърт Дауни мл."
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Гуинет Полтроу"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Джеф Бриджис"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Крис Евънс"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Скарлет Йохансън"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "Марк Ръфало"
                        },
                        new
                        {
                            Id = 7,
                            FullName = "Крис Прат"
                        },
                        new
                        {
                            Id = 8,
                            FullName = "Зоуи Салдана"
                        },
                        new
                        {
                            Id = 9,
                            FullName = "Дейв Батиста"
                        },
                        new
                        {
                            Id = 10,
                            FullName = "Чедуик Боузман"
                        },
                        new
                        {
                            Id = 11,
                            FullName = "Майкъл Б. Джордан"
                        },
                        new
                        {
                            Id = 12,
                            FullName = "Лупита Нионго"
                        },
                        new
                        {
                            Id = 13,
                            FullName = "Крис Хемсуърт"
                        },
                        new
                        {
                            Id = 14,
                            FullName = "Том Хидълстън"
                        },
                        new
                        {
                            Id = 15,
                            FullName = "Кейт Бланшет"
                        });
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Movies.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Джон Фавро"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Джос Уидън"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Джеймс Гън"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Райън Куглър"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Тайка Уайтити"
                        });
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Movies.GenreOfMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The current Movie Genre's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("GenreOfMovieId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("The current Movie Genre's Name");

                    b.HasKey("Id");

                    b.HasIndex("GenreOfMovieId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Екшън"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Приключенски"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Комедия"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Драма"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ужаси"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Фентъзи"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Научна фантастика"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Трилър"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Криминален"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Документален"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Романтичен"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Исторически"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Военен"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Анимация"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Мистерия"
                        });
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Movies.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The current Movie's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("The current Movie's Description");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int")
                        .HasComment("The current Movie's Director Identifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasComment("The current Movie's Movie Watch Time");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasComment("The date on which the curent Movie release");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("The current Movie's Title");

                    b.Property<string>("URLImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The current Movie's URLImage");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "\"Iron Man\" представя историята на Тони Старк, гений инженер и милиардер, който живее двойствен живот като супергерой. Филмът разкрива как Тони Старк, след като бива отвлечен и ранен в Афганистан, разработва високотехнологичен брониран костюм, който му позволява да се превърне в Желязният Човек. Той използва този костюм, за да се изправи срещу злодеи и престъпници, като същевременно се бори с вътрешни конфликти и дилеми. Филмът е пълен с екшън и напрежение, като зрителите са изправени пред въпроси за морал, отговорност и справедливост.",
                            DirectorId = 1,
                            Duration = 126,
                            ReleaseDate = new DateTime(2008, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Iron Man",
                            URLImage = "https://prod-ripcut-delivery.disney-plus.net/v1/variant/disney/80C64C0B63382CD3ED2653356125F275F63D036028A77D38DC3286AD851A6833/scale?width=1200&amp;aspectRatio=1.78&amp;format=webp"
                        },
                        new
                        {
                            Id = 2,
                            Description = "В епичния филм \"The Avengers\", Ник Фюри от S.H.I.E.L.D. събира екип от суперхора, за да формира отбора \"Мъстителите\", с цел да помогне за спасяването на Земята от Локи и неговата армия. Локи, братът на Тор и бивш бог на азгардската митология, пристига на Земята със зловещ план за завладяване на света и подчиняване на човечеството.\r\n\r\nФюри, разбирайки сериозността на заплахата, събира най-мощните супергерои от света, включително Желязният Човек (Тони Старк), Капитан Америка (Стив Роджърс), Тор, Хълк (Брус Банър), Блек Уидоу (Наташа Романоф) и Хоукай (Клинт Бартън). Заедно те формират отбора \"Мъстителите\", който трябва да се обедини и да се противопостави на Локи и неговите войски.\r\n\r\nФилмът предлага впечатляваща комбинация от екшън, вълнуващи битки, забавни диалози и емоционални моменти. \"Мъстителите\" не само представя единствено изключителния състав от супергерои, но и демонстрира тяхната способност да работят заедно, дори когато са различни по характери и мотивации.",
                            DirectorId = 2,
                            Duration = 143,
                            ReleaseDate = new DateTime(2012, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Avengers",
                            URLImage = "https://prod-ripcut-delivery.disney-plus.net/v1/variant/disney/B6981BDF339764E6C56626C9DE0820CEF297EAF069F62F244E0F50061219F069/scale?width=1200&aspectRatio=1.78&format=webp"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A group of intergalactic criminals must pull together to stop a fanatical warrior with plans to purge the universe.",
                            DirectorId = 3,
                            Duration = 121,
                            ReleaseDate = new DateTime(2014, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Guardians of the Galaxy",
                            URLImage = "https://m.media-amazon.com/images/M/MV5BNDIzMTk4NDYtMjg5OS00ZGI0LWJhZDYtMzdmZGY1YWU5ZGNkXkEyXkFqcGdeQXVyMTI5NzUyMTIz._V1_.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Description = "В \"Черният пантер\" (Black Panther), наследникът на скритото кралство Уаканда, Т'Чала, трябва да изпълни своето предназначение и да въведе своя народ в ново бъдеще, докато се изправя срещу предизвикателство от миналото на своята страна.\r\n\r\nСлед смъртта на баща си, крал Т'Чака, Т'Чала се връща в Уаканда, за да поеме своята правителствена отговорност като новият крал. Той обаче е изправен пред сериозни предизвикателства, когато мистериозния войник Ерик Килмонгър, познат също като Килмонгър, се появява, за да оспори неговото място като правител.\r\n\r\nТ'Чала се изправя срещу вътрешни и външни конфликти, докато се опитва да преодолее препятствията пред Уаканда и да гарантира мира и стабилността на своя народ. Разкрива се сложна интрига, която разкрива теми за власт, наследство и самоопределяне, като Т'Чала трябва да преодолее своите собствени съмнения и грешки, за да стане истинският герой, който Уаканда се нуждае.",
                            DirectorId = 4,
                            Duration = 134,
                            ReleaseDate = new DateTime(2018, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Black Panther",
                            URLImage = "https://m.media-amazon.com/images/I/91+GjGet65L._AC_UF894,1000_QL80_.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Description = "В \"Тор: Рагнарок\" (Thor: Ragnarok), Тор е затворен на планетата Сакаар и трябва да се състезава с времето, за да се върне в Асгард и да спре Рагнарок - разрушението на света му, на ръцете на могъщата и безмилостната злодейка Хела.\r\n\r\nСлед като е отведен отнасящата го в Сакаар, Тор се озовава в плен на тиранина Грандмастър, който го принуждава да участва в смъртоносни състезания. В този хаос той открива, че неговият стар враг, братът му Локи, също е в тези нещастия.\r\n\r\nТор и Локи се обединяват, за да победят своя общ враг - Хела, която се оказва могъща асгардианка, бягнала от затвора си, за да поеме контрол над своето родно кралство. Сблъсъкът е неизбежен, а Тор и Локи трябва да обединят силите си с нови съюзници, за да спасят Асгард от сигурната му гибел.",
                            DirectorId = 5,
                            Duration = 130,
                            ReleaseDate = new DateTime(2017, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Thor: Ragnarok",
                            URLImage = "https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p12402331_p_v10_ax.jpg"
                        });
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.MovieTheaters.MovieTheater", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The current MovieTheater's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ClosingTime")
                        .HasColumnType("datetime2")
                        .HasComment("The current MovieTheater's Closing Time");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The current MovieTheater's Mobile Contact");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The current MovieTheater's Image Url");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The current MovieTheater's Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The current MovieTheater's Name");

                    b.Property<DateTime>("OpeningTime")
                        .HasColumnType("datetime2")
                        .HasComment("The current MovieTheater's Opening Time");

                    b.HasKey("Id");

                    b.ToTable("MovieTheater");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The current Ticket's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"), 1L, 1);

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasComment("The current Movie's Identifier");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The current Ticket's Price");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2")
                        .HasComment("The current Ticket's PurchaseDate");

                    b.HasKey("TicketId");

                    b.HasIndex("MovieId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Books.Book", b =>
                {
                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Books.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Books.CoverType", "CoverType")
                        .WithMany("Books")
                        .HasForeignKey("CoverTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("CoverType");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Books.BookReview", b =>
                {
                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Books.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Carts.Cart", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Mappings.BookMapping.BookBookStore", b =>
                {
                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Books.Book", "Book")
                        .WithMany("BooksBookStores")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.BookStores.BookStore", "BookStore")
                        .WithMany("BooksBookStores")
                        .HasForeignKey("BookStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BookStore");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Mappings.BookMapping.BookCart", b =>
                {
                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Books.Book", "Book")
                        .WithMany("BooksCarts")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Carts.Cart", "Cart")
                        .WithMany("BooksCarts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Mappings.BookMapping.GenreGenreOfBook", b =>
                {
                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Books.Book", "Book")
                        .WithMany("GenresGenresOfBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Books.GenreOfBook", "Genre")
                        .WithMany("GenresMovies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Mappings.MoviesMaping.ActorMovie", b =>
                {
                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Movies.Actor", "Actor")
                        .WithMany("ActorsMovies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Movies.Movie", "Movie")
                        .WithMany("ActorsMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Mappings.MoviesMaping.GenreGenreOfMovie", b =>
                {
                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Movies.GenreOfMovie", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Movies.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Mappings.MoviesMaping.MovieMovieTheater", b =>
                {
                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Movies.Movie", "Movie")
                        .WithMany("MovieTheaters")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.MovieTheaters.MovieTheater", "MovieTheater")
                        .WithMany("MoviesMoviesTheaters")
                        .HasForeignKey("MovieTheaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("MovieTheater");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Movies.GenreOfMovie", b =>
                {
                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Movies.GenreOfMovie", null)
                        .WithMany("GenresMovies")
                        .HasForeignKey("GenreOfMovieId");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Movies.Movie", b =>
                {
                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Movies.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Ticket", b =>
                {
                    b.HasOne("SherplexTickets.Infrastructure.Data.Models.Movies.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Books.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Books.Book", b =>
                {
                    b.Navigation("BooksBookStores");

                    b.Navigation("BooksCarts");

                    b.Navigation("GenresGenresOfBooks");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Books.CoverType", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Books.GenreOfBook", b =>
                {
                    b.Navigation("GenresMovies");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.BookStores.BookStore", b =>
                {
                    b.Navigation("BooksBookStores");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Carts.Cart", b =>
                {
                    b.Navigation("BooksCarts");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Movies.Actor", b =>
                {
                    b.Navigation("ActorsMovies");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Movies.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Movies.GenreOfMovie", b =>
                {
                    b.Navigation("GenresMovies");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.Movies.Movie", b =>
                {
                    b.Navigation("ActorsMovies");

                    b.Navigation("Genres");

                    b.Navigation("MovieTheaters");
                });

            modelBuilder.Entity("SherplexTickets.Infrastructure.Data.Models.MovieTheaters.MovieTheater", b =>
                {
                    b.Navigation("MoviesMoviesTheaters");
                });
#pragma warning restore 612, 618
        }
    }
}
